---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-router
  namespace: kube-system
data:
  cni-conf.json: |
    {
      "cniVersion": "1.0.0",
      "name": "kube-router",
      "plugins": [
        {
          "name": "kube-router",
          "type": "bridge",
          "bridge": "kube-bridge",
          "isDefaultGateway": true,
          "hairpinMode": true,
          "ipam": {
            "type": "host-local"
          }
        }
      ]
    }
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-router
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kube-router
  namespace: kube-system
rules:
- apiGroups:
  - ''
  resources:
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kube-router
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-router
subjects:
- kind: ServiceAccount
  name: kube-router
  namespace: kube-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kube-router
  namespace: kube-system
  labels:
    k8s-app: kube-router
spec:
  selector:
    matchLabels:
      k8s-app: kube-router
  template:
    metadata:
      labels:
        k8s-app: kube-router
    spec:
      initContainers:
      - name: install-cni
        image: cloudnativelabs/kube-router:v1.5.3
        command:
        - /bin/sh
        - -c
        - set -ex;
          cp /etc/kube-router/20-kube-router.conflist /etc/cni/net.d/20-kube-router.conflist;
        resources:
          requests:
            cpu: 50m
            memory: 16Mi
        volumeMounts:
        - name: cni-conf-dir
          mountPath: /etc/cni/net.d
        - name: kube-router
          mountPath: /etc/kube-router
      containers:
      - name: kube-router
        image: cloudnativelabs/kube-router:v1.5.3
        args:
        - --bgp-graceful-restart=true
        - --run-firewall=true
        - --run-router=true
        - --run-service-proxy=true
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: KUBE_ROUTER_CNI_CONF_FILE
          value: /etc/cni/net.d/20-kube-router.conflist
        - name: KUBERNETES_SERVICE_HOST
          value: {{ kubernetes_control_plane_address }}
        - name: KUBERNETES_SERVICE_PORT
          value: "{{ kubernetes_control_plane_port }}"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 20244
          initialDelaySeconds: 10
          periodSeconds: 3
        resources:
          limits:
            cpu: 1000m
            memory: 256Mi
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          privileged: true
        volumeMounts:
        - name: cni-conf-dir
          mountPath: /etc/cni/net.d
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /var/run/xtables.lock
          readOnly: false
      hostNetwork: true
      priorityClassName: system-node-critical
      serviceAccount: kube-router
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoExecute
        operator: Exists
      volumes:
      - name: cni-conf-dir
        hostPath:
          path: /etc/cni/net.d
      - name: kube-router
        configMap:
          name: kube-router
          items:
          - key: cni-conf.json
            path: 20-kube-router.conflist
      - name: lib-modules
        hostPath:
          path: /lib/modules
      - name: xtables-lock
        hostPath:
          path: /var/run/xtables.lock
          type: FileOrCreate
