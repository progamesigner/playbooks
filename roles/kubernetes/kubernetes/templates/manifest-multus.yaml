---
apiVersion: v1
kind: ConfigMap
metadata:
  name: multus
  namespace: kube-system
data:
  cni-conf.json: |
    {
      "cniVersion": "1.0.0",
      "name": "multus",
      "plugins": [
        {
          "type": "multus",
          "clusterNetwork": "/etc/cni/net.d/20-kube-router.conflist",
          "defaultNetworks": [],
          "kubeconfig": "/etc/cni/net.d/multus.d/multus.kubeconfig"
        }
      ]
    }
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: multus
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: multus
rules:
- apiGroups:
  - k8s.cni.cncf.io
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - ''
  resources:
  - pods
  - pods/status
  verbs:
  - get
  - update
- apiGroups:
  - ''
  - events.k8s.io
  resources:
  - events
  verbs:
  - create
  - patch
  - update
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: multus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: multus
subjects:
- kind: ServiceAccount
  name: multus
  namespace: kube-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: multus
  namespace: kube-system
  labels:
    k8s-app: multus
spec:
  selector:
    matchLabels:
      k8s-app: multus
  template:
    metadata:
      labels:
        k8s-app: multus
    spec:
      initContainers:
      - name: install-kubeconfig
        image: cloudnativelabs/kube-router:v1.5.3
        command:
        - /bin/sh
        - -c
        - |
          set -ex;
          mkdir -p /etc/cni/net.d/multus.d;
          cat > /etc/cni/net.d/multus.d/multus.kubeconfig <<EOF
          apiVersion: v1
          kind: Config
          clusters:
          - name: multus
            cluster:
              server: https://{{ kubernetes_control_plane_address }}:{{ kubernetes_control_plane_port }}
              certificate-authority-data: $(cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt | base64 | tr -d '\n')
          users:
          - name: multus
            user:
              token: $(cat /var/run/secrets/kubernetes.io/serviceaccount/token | tr -d '\n')
          contexts:
          - name: multus
            context:
              cluster: multus
              user: multus
          current-context: multus
          EOF
        resources:
          requests:
            cpu: 50m
            memory: 16Mi
        volumeMounts:
        - name: cni-conf-dir
          mountPath: /etc/cni/net.d
      containers:
      - name: multus
        image: ghcr.io/k8snetworkplumbingwg/multus-cni:v4.0.0
        command:
        - /thin_entrypoint
        - --cni-bin-dir=/opt/cni/bin
        - --cni-conf-dir=/etc/cni/net.d
        - --multus-conf-file=/etc/multus/10-multus.conflist
        - --namespace-isolation=true
        env:
        - name: KUBERNETES_SERVICE_HOST
          value: {{ kubernetes_control_plane_address }}
        - name: KUBERNETES_SERVICE_PORT
          value: "{{ kubernetes_control_plane_port }}"
        resources:
          limits:
            cpu: 100m
            memory: 64Mi
          requests:
            cpu: 50m
            memory: 32Mi
        securityContext:
          privileged: true
        volumeMounts:
        - name: cni-bin-dir
          mountPath: /opt/cni/bin
        - name: cni-conf-dir
          mountPath: /etc/cni/net.d
        - name: multus
          mountPath: /etc/multus
      hostNetwork: true
      priorityClassName: system-node-critical
      serviceAccount: multus
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoExecute
        operator: Exists
      volumes:
      - name: cni-bin-dir
        hostPath:
          path: /opt/cni/bin
      - name: cni-conf-dir
        hostPath:
          path: /etc/cni/net.d
      - name: multus
        configMap:
          name: multus
          items:
          - key: cni-conf.json
            path: 10-multus.conflist
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: network-attachment-definitions.k8s.cni.cncf.io
spec:
  group: k8s.cni.cncf.io
  scope: Namespaced
  names:
    plural: network-attachment-definitions
    singular: network-attachment-definition
    kind: NetworkAttachmentDefinition
    shortNames:
    - net-attach-def
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        description:
          'NetworkAttachmentDefinition is a CRD schema specified by the Network Plumbing
          Working Group to express the intent for attaching pods to one or more logical or physical
          networks. More information available at: https://github.com/k8snetworkplumbingwg/multi-net-spec'
        type: object
        properties:
          apiVersion:
            description:
              'APIVersion defines the versioned schema of this represen
              tation of an object. Servers should convert recognized schemas to the
              latest internal value, and may reject unrecognized values. More info:
              https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description:
              'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: 'NetworkAttachmentDefinition spec defines the desired state of a network attachment'
            type: object
            properties:
              config:
                description: 'NetworkAttachmentDefinition config is a JSON-formatted CNI configuration'
                type: string
